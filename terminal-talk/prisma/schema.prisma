generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")   // pooled, for your app at runtime
  directUrl  = env("DIRECT_URL")     // direct, for migrations/introspection
}

model User {
  id              Int              @id @default(autoincrement())
  clerkId         String           @unique
  email           String           @unique
  username        String           @unique
  userCourses     UserCourse[]
  certificates    Certificate[]

  LectureProgress LectureProgress[]

  Conversation Conversation[]
}

model Course {
  id           Int           @id @default(autoincrement())
  title        String
  slug         String        @unique
  description  String
  category     String
  lectures     Lecture[]
  userCourses  UserCourse[]
  certificates Certificate[]
}

model Lecture {
  id           Int      @id @default(autoincrement())
  title        String
  topic        String
  description  String
  transcript   String
  projectId    String
  createdAt    DateTime @default(now())
  totalSeconds Int
  courseId     Int
  course       Course    @relation(fields: [courseId], references: [id])

  LectureProgress LectureProgress[]
}

model LectureProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  lectureId  Int
  completedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  lecture Lecture @relation(fields: [lectureId], references: [id])

  @@unique([userId, lectureId]) // Prevent duplicate tracking
}
model UserCourse {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  progress  Int      @default(0) // percent (0â€“100)
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Certificate {
  id       Int      @id @default(autoincrement())
  userId   Int
  courseId Int
  issuedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Conversation {
  id          String    @id @default(cuid())
  title       String    
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  messages    Message[]
  
  @@index([userId])
}
model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           String       // 'user' or 'assistant'
  conversationId String
  createdAt      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}
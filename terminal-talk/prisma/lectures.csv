id,title,topic,description,transcript,projectId,createdAt,totalSeconds,courseId
1, Inside the Node.js Runtime: How JavaScript Runs on a Server,"V8 Engine, Libuv, Runtime Environment","Explore the core of Node.js—how it runs JavaScript using the V8 engine, delegates work through Libuv, and differs from running code in the browser. A foundational deep dive into what makes Node tick.",'',v7IzSh9qHo1ut2fZIkLX,2025-07-22 01:17:20.128,300,1
2,Node’s Thread Pool: The Hidden Workers Behind Async Code,"Libuv Thread Pool, File System I/O, Blocking vs Non-blocking","Node is single-threaded—until it isn't. Learn how and when Node uses background threads to handle heavy operations like file access and encryption, and how that keeps your main thread fast.",'',vK0Rj0zditWowIqVHtrP,2025-07-22 01:19:51.079,300,1
3," How Node Loads Your Code: Modules, require(), and Caching","CommonJS Modules, Module Resolution, Caching","Every time you use require(), a lot happens behind the scenes. This lecture explains how Node resolves, wraps, and caches your modules for performance—and how to avoid common pitfalls.",'',vvRRMCn0dD1TZWhDJyPR,2025-07-22 01:21:03.163,300,1
4," Inside the Node.js Process: Globals, Buffers, and the Runtime Itself","The process Object, Env Variables, Buffers, and Monitoring","Node gives you deep access to the runtime itself. You’ll explore the process object, read env variables, manage memory with Buffers, and monitor performance using real-time introspection tools.",'',qKev6mbbRyhUBjjoq9hL,2025-07-22 01:22:21.633,300,1
5,The Problem Solving Framework: Don’t Code Yet,How to break down problems before touching the keyboard,"In interviews, jumping into code too fast is one of the most common mistakes. This lecture teaches a repeatable framework for approaching problems—understanding constraints, identifying edge cases, sketching solutions, and choosing the right data structure before writing a single line. Think like an engineer, not a typist.",'',z2mPVqmbmZ4oFLE7h12o,2025-07-22 01:26:34.353,300,2
6,"Mastering Patterns, Not Problems",Recognizing core algorithmic patterns,"Interview problems repeat. Not literally, but in structure. This lecture focuses on mastering patterns—like sliding window, fast & slow pointers, and recursion backtracking—so you can adapt to new problems by recognizing what’s underneath. We’ll walk through real examples and show how to abstract the idea from the code.",'',cVnMotySFNQ1euiW6U2P,2025-07-22 01:35:54.399,280,2
7,Data Structures for 90% of Interview Questions,"Real-world usage of arrays, maps, sets, stacks, and queues","You don’t need to memorize red-black trees. This lecture drills down into the 5–6 most important data structures that show up constantly in interviews. You’ll learn when to reach for a Map over an Object, how to use stacks for parsing, and why Sets solve more problems than you think.",'',tQtRwsHtDVv8Ja02GF2g,2025-07-22 01:38:11.191,278,2
8,Debugging Out Loud: How to Communicate While Solving,"Interview communication, self-debugging, and reasoning aloud","Even if you get stuck, a good problem-solving conversation can win the job. This lecture covers how to communicate clearly as you solve—narrating edge cases, reasoning through bugs, and debugging out loud. You’ll also learn how to turn failure into insight in a real-time interview.",'',cuPrCCBA4t3NPKIv7Ixb,2025-07-22 01:39:24.918,270,2
